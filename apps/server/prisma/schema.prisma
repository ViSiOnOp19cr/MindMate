// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String?
  email       String    @unique
  passwordHash String
  createdAt   DateTime  @default(now())

  folders     Folder[]
  chatHistory ChatHistory[]
}

model Folder {
  id        String    @id @default(uuid())
  userId    String
  name      String
  parentId  String?   // Recursive relationship
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Folder?   @relation("FolderToSubfolders", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[]  @relation("FolderToSubfolders")
  notes     Note[]
}

model Note {
  id        String    @id @default(uuid())
  folderId  String
  title     String?
  content   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  folder    Folder    @relation(fields: [folderId], references: [id], onDelete: Cascade)
  summaries Summary[]
  quizzes   Quiz[]
}

model Summary {
  id          String   @id @default(uuid())
  noteId      String
  gptResponse String
  createdAt   DateTime @default(now())

  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model Quiz {
  id          String   @id @default(uuid())
  noteId      String
  gptResponse String
  createdAt   DateTime @default(now())

  note        Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)
}

model ChatHistory {
  id        String   @id @default(uuid())
  userId    String
  message   String
  response  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

